/**
 * safe fs implementation that attempts to chroot
 * a path relative to a specific directory
 */
var fs = require('fs'),
	path = require('path'),
	_ = require('underscore')._
;


function SafeFS(chroot)
{
	this.chroot = String(chroot+'/');
	
	var self = this;

	// this methods all have a path argument that we need to make safe
	var safeFirstArg = [
			'rename','renameSync',
			'chown', 'chownSync',
			'lchown','lchownSync',
			'chmod','chmodSync',
			'lchmod','lchmodSync',
			'stat','statSync',
			'lstat','lstatSync',
			'realpath','realpathSync',
			'unlink','unlinkSync',
			'rmdir','rmdirSync',
			'mkdir','mkdirSync',
			'open','openSync',
			'utimes','utimesSync',
			'readFile','readFileSync',
			'writeFile','writeFileSync',
			'watchFile','unwatchFile',
			'watch',
			'createReadStream',
			'createWriteStream'
	];
	
	// these methods are safe and can be called as-is
	var safe = ['fstat','fchown','truncate','fchmod','fstat','fstatSync','close','closeSync','futimes','futimesSync','fsync','fsyncSync','write','writeSync','read','readSync'];
	
	_.each(safe,function(fn)
	{
		var method = fs[fn];
		if (method)
		{
			self[fn] = _.bind(method);
		}
		else
		{
			console.log("ERROR: couldn't find method: "+fn+" on module: fn");
			process.exit(1);
		}
	});
	
	_.each(safeFirstArg,function(n)
	{
		var method = fs[n];
		
		self[n] = function()
		{
			var args = arguments;
			var a1 = path.normalize(args[0]);
			var fn = String(path.resolve(args[0]));
			var fp = fn.substring(0,self.chroot.length);
			if (fp !== self.chroot)
			{
				// don't allow outside chroot -- just replace .. with .
				var nfn = a1.replace(/\.\./g,'.');
				fn = path.join(self.chroot,nfn);
			}
			args[0] = path.resolve(fn);
			return method.apply(this,args);
		};
	});
	
	return self;
}

exports.FS = SafeFS;
