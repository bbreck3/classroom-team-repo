var path = require('path'),
	util = require('../util'),
	fs = require('fs'),
	querystring = require('querystring'),
    request = require('request'),
    HandleResult = require('./handleResult'),
	logger = require('../logger');

exports.run = function(args, program) {
    var p,
        method,
        url,
        globalConfig = util.getGlobalConfig(),
        defaultConfig = util.getDefaultConfig(),
        proxy = util.getProxy();

    if(proxy) {
        logger.debug('ACS CLI is using proxy: ' + proxy.server);
        proxy = proxy.url;
    }
    if(globalConfig.publishHost && !program.isCallback) {
        console.log(String(('Admin Hostname: ' + globalConfig.publishHost).grey));
    }

    var op = null, va = null;
    if(program.set) {
        op = 'set';
        va = program.set;
        method = 'POST';
    } else if(program.list) {
        op = 'list';
        method = 'GET';
    }

    if(op == null) {
        util.die('You must provide required argument and options to continue.');
    }

    var cookie = globalConfig.cookie ? String(globalConfig.cookie).split(';')[0] || [ 'connect-sid', '' ].join('=') : '';

    p = '/server';

    if(op === 'set') {
        var appname = util.getAppName(args, program);
        p += '/' +  appname + '/' + op;
    } else if (op === 'list') {
        p += '/' + op;
    }
    if(va) {
        p += '/' + va;
    }

    url = (globalConfig.publishHost || defaultConfig.publishHost) + ':' + (globalConfig.publishPort || defaultConfig.publishPort) + p;

    if(program.org) {
        url += ('?orgid=' + program.org);
    }

    var options = {
        uri: url,
        method: method,
        proxy: proxy,
        headers: {
            'Cookie': cookie,
            'Content-Type': 'application/x-www-form-urlencoded'
        }
    };

    if(op === 'set') {
        var HRC = new HandleResult();
        HRC.reqParams=['server', args, program];
        HRC.checkResult = function(response, result) {
            if (!result.success) {
                if (result.errcode && result.errcode === 362) {   // set the same server size as it is
                    console.log(result.message);
                    process.exit();
                }
                if(result.message) {
                    util.die(result.message + ' ' + (result.extended || ''), result.errcode ? result.errcode : 1);
                } else {
                    util.die('Failed to get app deployment status: ' + result);
                }
            }
            if (result.message && result.message.deployed === true) {
                // app has been deployed
                process.stdin.resume();
                program.prompt('Making changes to server size will redeploy your app. Proceed [yes/no]: ', function(val) {
                    if(val.trim() == 'yes') {
                        doChange();
                    } else {
                        process.exit();
                    }
                });
            } else {
                doChange();
            }
        };

        options.method = 'GET';
        request(options, HRC.handler);

        function doChange() {
            var HR = new HandleResult();
            HR.reqParams=['server', args, program];
            options.method = method;
            request(options, HR.handler);
        }

    } else {
        var HR = new HandleResult();
        HR.reqParams=['server', args, program];
        HR.checkResult = function(response, result) {
            if (!result.success) {
                if(result.message) {
                    util.die(result.message + ' ' + (result.extended || ''), result.errcode ? result.errcode : 1);
                } else {
                    util.die('Failed to get server quotas: ' + result);
                }
            }

            if(!result.quotas || result.quotas.length === 0) {
                console.log('No quota info found.');
            } else {
                console.log(String('Server Quotas: '.cyan));
                result.quotas.forEach(function(quota) {
                    console.log(JSON.stringify(quota, null, 4));
                });
            }
        }
        request(options, HR.handler);
    }
}