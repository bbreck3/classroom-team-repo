var util = require('../util.js'), 
	logger = require('../logger.js'), 
	fs = require('fs'), 
	program = require('commander'), 
	path = require('path'), 
	uuid = require('node-uuid'), 
    request = require('request'),
    HandleResult = require('./handleResult'),
    _ = require('underscore')._;

exports.run = function(args, opts) {
	var p, 
		url, 
		globalConfig = util.getGlobalConfig(), 
		defaultConfig = util.getDefaultConfig(),
        proxy = util.getProxy();

    if(proxy) {
        logger.debug('ACS CLI is using proxy: ' + proxy.server);
        proxy = proxy.url;
    }
    if(globalConfig.publishHost && !opts.isCallback) {
        console.log(String(('Admin Hostname: ' + globalConfig.publishHost).grey));
    }

	// the command line argument will be treated as app name
	var appname = null;
	if (args.length > 0) {
		appname = args[0];
	}

	var cookie = globalConfig.cookie ? String(globalConfig.cookie).split(';')[0] || [ 'connect-sid', '' ].join('=') : '';

	p = '/list';

	if (appname) {
		p += '/' + appname;
	}

    var queryAdded = false;
    if(opts.mine) {
        p += '?owner=developer';
        queryAdded = true;
    }

    if(opts.org) {
        if(queryAdded)
            p += '&orgid=';
        else
            p += '?orgid=';
        p += opts.org;
    }

	url = (globalConfig.publishHost || defaultConfig.publishHost) + ':' + (globalConfig.publishPort || defaultConfig.publishPort) + p;

    var HR = new HandleResult();
    HR.reqParams=['list', args, opts];
    HR.errorMessage = 'List failed';
    HR.succeed = function(response, result) {
        var apps = result.apps;
		var quotas = result.quotas || [];
        showList(apps, quotas, result.clusterType == 'enterprise', opts);
    };

    request({
        uri: url,
        method: 'GET',
        proxy: proxy,
        headers: {
            'Cookie': cookie,
            'Content-Type': 'application/x-www-form-urlencoded'
        }
    }, HR.handler);

};

function showList(apps, quotas, enterprise, opts) {
	if (apps.length == 0) {
		console.log('No app found.');
		return;
	}

    var lastOrgid = null;
	for ( var i = 0; i < apps.length; i++) {
		console.log();
		var app = apps[i];
        if(!app) continue;
        if(enterprise) {
            if(app.orgid !== lastOrgid) {
                lastOrgid = app.orgid;
                console.log('Organization: ' + app.orgName + ' (' + app.orgid + ')');
                console.log('============ ');
                quotas.forEach(function(quota) {
                    if(quota.orgid === app.orgid) {
                        console.log(String('Points:'.cyan));
                        console.log(' -- Quota: '.cyan + quota.points.quota);
                        console.log(' -- Used: '.cyan + quota.points.used);
                        console.log();
                    }
                });
            }
        }
		console.log('App name: '.cyan + app.name);
        if (enterprise && app.userName)
            console.log(' -- Created by: '.cyan + app.userName);
		if (app.url)
			console.log(' -- URL: '.cyan + app.url);
		if (app.cname) {
			console.log(' -- DOMAIN: '.cyan + app.cname);
		}
		if (app.created_at) {
			console.log(' -- Created at: '.cyan + new Date(app.created_at));
		}
        if (app.NodeVersion) {
            console.log(' -- Node Version: '.cyan + app.NodeVersion);
        } else {
            console.log(' -- Node Version: '.cyan + '0.8.26');
        }
        if (app.gitconf) {
            if(app.gitconf.repo) {
                console.log(' -- Git Repo: '.cyan + app.gitconf.repo);
                if(app.gitconf.branch) {
                    console.log(' -- Git Branch: '.cyan + app.gitconf.branch);
                }
            }
        }
        if (app.server_size) {
            console.log(' -- Server Size: '.cyan + app.server_size);
        }
        if (app.max_size) {
            console.log(' -- Maximum allowed number of servers: '.cyan + app.max_size);
        }
        if (app.cur_size) {
            console.log(' -- Desired minimum number of servers: '.cyan + app.cur_size);
        }
        if (app.deployed_size) {
            console.log(' -- Current number of deployed servers: '.cyan + app.deployed_size);
        }
        if (app.scaleUpEnabled !== undefined) {
            console.log(' -- Auto scale-up enabled: '.cyan + app.scaleUpEnabled);
        }
        if (app.maxQueuedRequestsPerServer && app.scaleUpEnabled) {
            console.log(' -- Maximum queued requests per server: '.cyan + app.maxQueuedRequestsPerServer);
        }
        if (app.scaleDownEnabled !== undefined) {
            console.log(' -- Auto scale-down enabled: '.cyan + app.scaleDownEnabled);
        }
        if (app.unpublished_at) {
            console.log(' -- Status: '.cyan + 'Unpublished');
            console.log(' -- Unpublished at: '.cyan + new Date(app.unpublished_at));
            continue;
        }
        var publishedVersions = [], currentVersion = null;
        if(app.publishes) {
            publishedVersions = Object.keys(app.publishes);
        }
        if (app.currentPublish) {
            currentVersion = Object.keys(app.currentPublish)[0];
        } else { //backward compatibility
            currentVersion = publishedVersions[0];
        }

        if (currentVersion) {
            var createDate = new Date(app.publishes[currentVersion].created_at);
            console.log(' -- Active version: '.cyan + currentVersion);
            console.log(' -- Published at: '.cyan + createDate);
            if(app.status) {
                console.log(' -- Status: '.cyan + app.status);
                if (app.message) {
                    console.log(' -- Message: '.cyan + app.message);
                }
            }

            if(app.servers && app.servers.length > 0) {
                console.log(String(' -- Servers: '.cyan));
                var normalSvrCnt = 0, svrCnt = 0;
                app.servers.forEach(function(server, index, array) {
                    if(server.status == 'Deployed') {
                        normalSvrCnt++;
                        if(opts.show_all || app.servers.length <= 10)
                            console.log('    No. '.cyan + ++svrCnt + '\tID: '.cyan + server.id + '\tStatus: '.cyan + server.status);
                    } else {
                        console.log('    No. '.cyan + (++svrCnt) + '\tID: '.cyan + server.id + '\tStatus: '.cyan + server.status);
                        if (server.message) {
                            console.log('  -- Message: '.cyan + server.message);
                        }
                    }
                });
                if(app.servers.length > 10)
                    console.log('  - Number of servers deployed successfully: '.cyan + normalSvrCnt);
            }
		} else {
            console.log(' -- Status: '.cyan + 'To be published');
        }
	}
}